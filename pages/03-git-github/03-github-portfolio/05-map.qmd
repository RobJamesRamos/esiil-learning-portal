---
title: "Add a map to your website"
subtitle: "Get started with maps"
description: |
  As Earth and Environmental Data Scientists, we know places are important. In this activity, you will make your first map in Python, and use it to tell the story of where you come from and what places are important to you.
learning-goals: 
  - Define geospatial vector data
  - Search for geospatial features
  - Construct a map and embed it into a portfolio website
author:
  - "Nate Quarderer"
  - "Elsa Culler"
date: last-modified
keywords:
  - "Vector Data"
  - "Cartography"
jupyter: python3
---

## Get started with map-making using open-sources tools

::: {.content-hidden when-profile="nb"}
### About Spatial Vector Data

Vector data are composed of discrete geometric locations (x and y values, or latitude and longitude) that define the “shape” of the spatial object. The organization of the vertices determines the type of vector that you are working with. There are three fundamental types of vector data:

**Points:** Each individual point is defined by a single x, y coordinate. Examples of point data include: sampling locations, the location of individual trees or the location of plots.

**Lines:** Lines are composed of many (at least 2) vertices, or points, that are connected. For instance, a road or a stream may be represented by a line. This line is composed of a series of segments, each bend in the road or stream represents a vertex that has defined x, y location.

**Polygons:** A polygon consists of 3 or more vertices that are connected and closed. Thus, the outlines of plot boundaries, lakes, oceans, and states or countries are often represented by polygons.

![There are three types of vector data -- point, line, and polygon](https://www.earthdatascience.org/images/earth-analytics/spatial-data/points-lines-polygons-vector-data-types.png)

::: {.callout-tip}
Read more about working with spatial data using Python in our Intro to Earth Data Science, [here](https://www.earthdatascience.org/courses/intro-to-earth-data-science/file-formats/use-spatial-data/use-vector-data/).
:::

### Open this activity in GitHub Codespaces

To complete this activity, you will need somewhere to run your code. Start by going to this [repository on GitHub](https://github.com/cu-esiil-edu/first-map-template/). We've set it up so that anyone can run Python code from there!

Once you are on the website, follow these instructions to get your Codespace up and running:

   1. Click on Use this Template in the upper right, and select Open in Codespace. This might take a minute if you haven't done it in awhile.
   2. Once the Codespace loads, open `!00-first-map.ipynb` using the `Folders` tab on the left-hand side.
   3. Continue working through the sample notebook. All the code should start off the same as what is on this page, but there's more background information here if you want it.
   4. Once you are done, [stop your Codespace](https://docs.github.com/en/codespaces/developing-in-a-codespace/stopping-and-starting-a-codespace#stopping-a-codespace) so you don't use up your allocation!

### Finding locations and boundaries

[Open Street Map (OSM)](https://www.openstreetmap.org/) is an open-source, editable map of the world -- a little like a wiki for places. They also provide a service for looking up locations using text, which we'll be using in this activity.

:::

### Mapping libraries

You'll need to start by importing some libraries to have access to all the code you need.

:::{.content-visible .callout-tip when-profile="nb"}
To run code in Codespaces, click on the play button in the upper left corner of the code you want to run. You may be asked to "Select a kernel". If you press <kbd>Return</kbd> or click on `base` up at the top, that should select the default kernel.
:::

```{python}
# Work with vector data
import geopandas as gpd

# Save maps and plots to files
import holoviews as hv
# Create interactive maps and plots
import hvplot.pandas

# Search for locations by name - this might take a moment
from osmnx import features as osm
```

### Search for a point of interest

You can use the `pyrosm` package to download and search for spatial vector data in your area, or anywhere around the world.

In this case, we're looking for the location of the United Tribes Technical College campus in North Dakota. The address in here, `'United Tribes Technical College, Bismarck, ND, United States'`, does not have to be complete or exact, but it should be specific enough to narrow it down. We are also specifying that we want it to be tagges as a `'amenity'` type, specifically a `'college'` You might have to try a couple different searches with different addresses and/or tags to get the address you want, just like if you are using a map website or app.

```{python}
# Search for United Tribes Technical College
uttc_gdf = osm.features_from_address(
    'United Tribes Technical College, Bismarck, ND, United States',
    {'amenity': ['college']})
uttc_gdf
```

```{python}
uttc_gdf.plot()
```

We have a map of the UTTC Campus!

::: {.callout-warning}
The Open Street Maps (OSM) database is not always complete. For example, try searching for UTTC with the `{'building': True}`, and compare it to the [map of the UTTC campus on their website](https://uttc.edu/wp-content/uploads/2022/12/CAMPUS-MAP-2022-23.pdf). What do you notice?
:::

### Create an interactive map

There are lots of different ways to create maps and plots in Python. Here, we're going to use a tool called `'hvplot'` and `'geoviews'` to create an interactive map, including the online `'EsriImagery'` tile source basemap.

```{python}
# Plot UTTC boundary
uttc_map = uttc_gdf.hvplot(
    # Givethe map a descriptive title
    title="United Tribes Technical College, Bismarck, ND",
    # Add a basemap
    geo=True, tiles='EsriImagery',
    # Change the colors
    fill_color='white', fill_alpha=0.2,
    line_color='skyblue', line_width=5,
    # Change the image size
    frame_width=400, frame_height=400)

# Save the map as a file to put on the web
hv.save(uttc_map, 'uttc.html')

# Display the map
uttc_map
```

### Download your map from Codespaces

If you are doing this activity on GitHub Codespaces, you will need to download the map you created:

  1. Open the `Folders` tab on the left hand side
  2. Right-click on `uttc.html` (or whatever you named your file)
  3. Select `Download...`

This should download your map.

::: {.content-hidden when-profile="nb"}

### Place your map in your webpage

You are now ready to upload your map to your portfolio repository and place it in your webpage. Because it is HTML and not an image, you will need to use the following HTML to get it on your page:

```markdown
<embed type="text/html" src="uttc.html" width="600" height="600">
```

<embed type="text/html" src="uttc.html" width="600" height="600">

:::{.callout-important}
Make sure to make the `width` and `height` of your `embed` element larger than the `frame_width` and `frame_height` of your plot, or it will get cut off!
:::

:::