---
title: "Customize your website content"
subtitle: "Web development for portfolio websites"
image: /images/earth-analytics/git-version-control/github-pages/lesson-portfolio-content.png
image-alt: "A woman considers multiple website layouts"
description: |
  It can be hard to get your website exactly right with only Markdown. You can get more control over your website content and layout with HTML.
author: 
  - "Nate Quarderer"
  - "Elsa Culler"
excerpt: |
  When creating your webpage, you might want to do a couple of things with your content that most types of Markdown can't do, such as:
    * Specify the size of an image
    * Control whether links open up in a new tab
    * Embed videos and other web content
    * Change colors, fonts, or font sizes in one section of your page
  HTML (Hyper-Text Markup Language), *does* have the ability to do all those things and more. 
objective: |
  * Learn what HTML, CSS, and Javascript do on web pages
  * Learn how to use Web Developer Tools in your browser
  * Write basic HTML syntax
  * Use HTML to add additional features to your website
jupyter: python3
---

## The web is built on HTML, CSS, and JS

Most web pages are built using three key technologies:

-   Hyper-Text Markup Language (HTML) contains **structured content**
-   Cascading Style Sheets (CSS) controls how the page **looks**
-   Javascript (JS) controls what the page **does**

When using GitHub Pages, you can rely on GitHub to translate Markdown to HTML before putting it on the web using a system called **Jekyll**. You can see the result by:

1.  Navigate to your portfolio page on the internet
2.  Right-click anywhere on the page
3.  Select an option like `Inspect` or `Web Developer Tools`, depending on your browser.

You should now see the source code for your webpage in a new panel. What do you notice about your content? How is it different from what you wrote?

::: callout-tip
You can also control CSS and JS to a limited extent on GitHub Pages. However, we recommend sticking with the CSS and JS supplied by a Jekyll theme created by a designer. It's hard to make a website that looks good from scratch. We'll get into how to add a theme later on.
:::

## Use HTML to add features that aren't available in Markdown

### Make sure to format your HTML code so that it is readable

One great thing about Markdown is that it is both **human-readable** and **machine-readable**. It's a little harder to tell what is going on with HTML, especially if it is formatted poorly. For example, take a look at some Markdown and its equivalent in HTML. Unlike Markdown, the computer doesn't care how we use whitespace when formatting HTML. We can make HTML easier to read by adding whitespace and new lines:

::: panel-tabset
### Markdown

```markdown
# A fabulous Earth Data Science Portfolio <!-- <1> -->

![Super-cool satellite imagery](/images/cool_satellite_image.png) <!-- <2> -->

Some text and [a link](https://www.my_link.org) and:

  * A
  * Bulleted
  * List
```
1. The will be a *level 1* header because it begins with  *one* `#`
2. This will be an image since it starts with a `!`

### Messy HTML (Don't do this!)

```html
<h1>A fabulous Earth Data Science Portfolio</h1><img 
src="link/to/image.png" alt-text="Super-cool satellite imagery">
<p>Some text and <a 
href="https://www.my_link.org">a link</a> 
and:</p><ul><li>A</li><li>Bulleted
</li><li>List</li></ul>
```

### Cleaner HTML

``` html
<h1>A fabulous Earth Data Science Portfolio</h1> <!-- <1> -->

<!-- Comments help the reader understand your code --> <!-- <2> -->
<img 
  src="link/to/image.png" 
  alt="Super-cool satellite imagery" /> <!-- <3> -->

<p>
  Some text and <a href="https://www.my_link.org">a link</a> 
  and:
</p>

<ul>
    <li>A</li>
    <li>Bulleted</li>
    <li>List</li>
</ul>
```
1. This is a *level 1* header, since it is surrounded by `h1` tags.
2. *Comments* won't appear on your web page
3. The `img` tag will be an image.
:::

### HTML Basics (for Markdown users)

## Tags

Notice that most elements are surrounded by **tags** enclosed in angle brackets (`<` and `>`). For example, when we include a header 1, we do that with the following code:

```html
<h1>                                              <!-- <1> -->
  A fabulous Earth Data Science Portfolio         <!-- <2> -->
</h1>                                             <!-- <3> -->
```
1. Start with the opening tag for `h1` (header level 1), then
2. Place the text of the header in between the tags.
3. End with the closing tag, which match the opening tag plus a `/`

::: {.callout-tip}
If there is no *text* that needs to go between two HTML tags, you don't need a closing tag. Instead, you can end the opening tag with `/>` to indicate that there's no content. For example, take another look at the image HTML code:

```html
<img 
  src="link/to/image.png" 
  alt="Super-cool satellite imagery" />
```
:::

::: {.callout-tip .column-margin}
### Speak Code

Remember that the `<` and `>` symbols are **usually** used to surround text you should replace with something applicable to you and your project. There's a **BIG exception** when it comes to building websites -- `<` and `>` are key **special characters** if you are using HTML, the markup language used on most websites. So, if the code sample is HTML, you should leave the angle brackets `<` and `>` in.
:::

You can add HTML elements into your Markdown documents. There is no need when using GitHub Pages to write entire documents in HTML; you can simply substitute HTML elements for Markdown elements where needed. For example, say you have written the following Markdown to display an image:

``` markdown
![Super-cool satellite imagery](/images/cool_satellite_image.png)
```

![Super-cool satellite imagery](/images/cool_satellite_image.png)

Unfortunately, the image is taking up the entire view of the page. You can't adjust the size with GitHub Markdown alone, but you can replace the image with HTML and control the height:

``` markdown
<img 
  src="/images/cool_satellite_image.png" 
  alt="Super-cool satellite imagery" 
  height="20rem">
```
<img 
  src="/images/cool_satellite_image.png" 
  alt="Super-cool satellite imagery" 
  height="20rem">

::: {.callout-warning} 
If you set **both** the width and the height of an image, your image will become distorted:

```html
<img 
  src="/images/cool_satellite_image.png" 
  alt="Super-cool satellite imagery" 
  height="20px" 
  width="10px">
```

<img 
  src="/images/cool_satellite_image.png" 
  alt="Super-cool satellite imagery" 
  height="20px" 
  width="10px">

:::

## External links

When you are linking to someone else's webpage, often you want that page to open in a new tab or window so your reader doesn't leave your webpage.

:::{.callout-warning .column-margin}
Note that some web designers and readers don't like this behavior and would prefer that the reader decide for themselves whether they open a new tab or not. But it's a pretty widespread practice, so it's up to you how you want your webpage to work.
:::

There's no way to do this in most flavors of Markdown, but if you write your link in HTML you can at a `target="_blank"` parameter:

```html
<a 
  href="https://www.my_link.org"
  target="_blank">
  a link
</a> 
```

## Embedding content

## Styling text