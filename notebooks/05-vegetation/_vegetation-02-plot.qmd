
::: {.callout-task title="Plot the change in NDVI spatially"}
Complete the following:

  - Select data from 2021 to 2023 (3 years after the fire)
  - Take the temporal mean (over the **date**, not spatially)
  - Get the NDVI variable (should be a DataArray, not a Dataset)
  - Repeat for the data from 2018 to 2020 (3 years before the fire)
  - Subtract the 2018-2020 time period **from** the 2021-2023 time period
  - Plot the result using a **diverging** color map like `cmap=plt.cm.PiYG`

There are different types of color maps for different types of data. In this case, we want decreases to be a different color from increases, so we should use a **diverging** color map. Check out available colormaps in the [matplotlib documentation](https://matplotlib.org/stable/tutorials/colors/colormaps.html).
:::

::: {.callout-extra}
For an extra challenge, add the fire boundary to the plot.
:::

```{python}
#| template: student

# Compute the difference in NDVI before and after the fire

# Plot the difference
(
    ndvi_diff.hvplot(x='', y='', cmap='', geo=True)
    *
    gdf.hvplot(geo=True, fill_color=None, line_color='black')
)
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer

ndvi_diff = (
    ndvi_da
        .sel(date=slice('2021', '2023'))
        .mean('date')
        .NDVI 
   - ndvi_da
        .sel(date=slice('2018', '2020'))
        .mean('date')
        .NDVI
)
(
    ndvi_diff.hvplot(x='x', y='y', cmap='PiYG', geo=True)
    *
    gdf.hvplot(geo=True, fill_color=None, line_color='black')
)
```
:::

# Is the NDVI lower within the fire boundary after the fire?

You will compute the mean NDVI inside and outside the fire boundary. First, use the code below to get a `GeoDataFrame` of the area outside the Reservation. Your task: \* Check the variable names - Make sure that the code uses your boundary `GeoDataFrame` \* How could you test if the geometry was modified correctly? Add some code to take a look at the results.

```{python}
#| template: student

# Compute the area outside the fire boundary

```

::: {.content-visible when-format="html"}
```{python}
#| template: answer

# Compute the area outside the fire boundary
out_gdf = (
    gpd.GeoDataFrame(geometry=gdf.envelope)
    .overlay(gdf, how='difference'))
```
:::

Next, clip your DataArray to the boundaries for both inside and outside the reservation. You will need to replace the `GeoDataFrame` name with your own. Check out the [lesson on clipping data with the `rioxarray` library in the textbook](https://www.earthdatascience.org/courses/use-data-open-source-python/intro-raster-data-python/raster-data-processing/crop-raster-data-with-shapefile-in-python/).

::: {.callout-caution title="GOTCHA ALERT"}
It's important to use `from_disk=True` when clipping large arrays like this. It allows the computer to use less valuable memory resources when clipping - you will probably find that otherwise the cell below crashes your kernel.
:::

```{python}
#| template: student

# Clip data to both inside and outside the boundary
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer

# Clip data to both inside and outside the boundary
ndvi_cp_da = ndvi_da.rio.clip(gdf.geometry, from_disk=True)
ndvi_out_da = ndvi_da.rio.clip(out_gdf.geometry, from_disk=True)
```
:::

::: {.callout-task}
For **both inside and outside** the fire boundary:

  - Group the data by year
  - Take the mean. You always need to tell reducing methods in `xarray` what dimensions you  want to reduce. When you want to summarize data across **all** dimensions, you can use the `...` syntax, e.g. `.mean(...)` as a shorthand.
  - Select the NDVI variable
  - Convert to a DataFrame using the `to_dataframe()` method
  - Join the two DataFrames for plotting using the `.join()` method. You will need to rename the columns using the `lsuffix=` and `rsuffix=` parameters

:::: {.callout-caution title="GOTCHA ALERT"}
The DateIndex in pandas is a little different from the Datetime Dimension in xarray. You will need to use the `.dt.year` syntax to access information about the year, not just `.year`.
::::

Finally, plot annual July means for both inside and outside the Reservation on the same plot.
:::

```{python}
#| template: student

# Compute mean annual July NDVI
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer

# Compute mean annual July NDVI
jul_ndvi_cp_df = (
    ndvi_cp_da
    .groupby(ndvi_cp_da.date.dt.year)
    .mean(...)
    .NDVI.to_dataframe())
jul_ndvi_out_df = (
    ndvi_out_da
    .groupby(ndvi_out_da.date.dt.year)
    .mean(...)
    .NDVI.to_dataframe())

# Plot inside and outside the reservation
jul_ndvi_df = (
    jul_ndvi_cp_df[['NDVI']]
    .join(
        jul_ndvi_out_df[['NDVI']], 
        lsuffix=' Burned Area', rsuffix=' Unburned Area')
)

jul_ndvi_df.hvplot(
    title='NDVI before and after the Cameron Peak Fire'
)
```
:::

Now, take the difference between outside and inside the Reservation and plot that. What do you observe? Don't forget to write a headline and description of your plot!

```{python}
#| template: student

# Plot difference inside and outside the reservation
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer

# Plot difference inside and outside the reservation
jul_ndvi_df['difference'] = (
    jul_ndvi_df['NDVI Burned Area']
    - jul_ndvi_df['NDVI Unburned Area'])
jul_ndvi_df.difference.hvplot(
    title='Difference between NDVI within and outside the Cameron Peak Fire'
)
```
:::
