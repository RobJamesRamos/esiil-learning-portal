---
title: Climate coding challenge, Part 2
jupyter: python3
format:
  ipynb:
    output-file: "Get Started with Open Reproducible Science, Part 2!"
---



# Wrangle your data

## What the fork?! Who wrote this?

Below is a scientific Python workflow. But something's wrong -- The code won't run! Your task is to follow the instructions below to **clean and debug** the Python code below so that it runs.

::: callout-tip
Don't worry if you can't solve every bug right away. We'll get there! If you are working on one bug for more than about 10 minutes, it's time to ask for help. 
:::

At the end, you'll **repeat the workflow** for a location and measurement of your choosing.

Alright! Let's clean up this code.

------------------------------------------------------------------------

## Python **packages** let you use code written by experts around the world

Because Python is open source, lots of different people and organizations can contribute (including you!). Many contributions are in the form of **packages** which do not come with a standard Python download.

::: {.callout-note icon="false"}
# {{< fa glasses size=large >}} Read more

[Packages need to be installed and **imported**](https://www.earthdatascience.org/courses/intro-to-earth-data-science/python-code-fundamentals/use-python-packages/).
:::

In the cell below, someone was trying to import the **pandas package**, which helps us to work with [**tabular data** such as comma-separated value or csv files](https://www.earthdatascience.org/courses/intro-to-earth-data-science/file-formats/use-text-files/).

::: {.cell .markdown}
:::: {.callout-important icon="false"}
# {{< fa keyboard size=large >}} Your task: Import a library

- [ ] Correct the typo below to properly import the pandas package under its **alias** pd.
- [ ] Run the cell to import pandas

::::: {.content-visible when-format="ipynb"}
NOTE: **Run your code in the right **environment** to avoid import errors**

We've created a coding **environment** for you to use that already has all the software and libraries you will need! When you try to run some code, you may be prompted to select a **kernel**. The **kernel** refers to the version of Python you are using. You should use the **base** kernel, which should be the default option.
:::::
::::
:::

```{python}
#| error: true
# Import pandas
import pandsa as pd
```

::: {.content-visible when-format="html"}
```{python}
#| code-fold: true
#| code-summary: See our solution!
# Import pandas
import pandas as pd
```
:::

::: {.content-visible when-format="ipynb"}
Once you have run the cell above and imported `pandas`, **run the cell below**. It is a test cell that will tell you if you completed the task successfully. If a test cell isn't working the way you expect, check that you ran your code **immediately before** running the test.

```{python}
# DO NOT MODIFY THIS TEST CELL
try:
    pd.DataFrame()
    print('\u2705 Great work! You correctly imported the pandas library.')
except:
    print('\u274C Oops - pandas was not imported correctly.')
```
:::

------------------------------------------------------------------------

## Download the practice data

Next, lets download some climate data from {{< meta params.01-climate.location >}} to practice with. We keep our practice data on GitHub, so that we can check that it still works and make sure it looks just like the data you would download from the original source.

::: {.content-visible when-format="html"}
:::: {.callout-tip}
## Do you want to download your own climate data from a place of your choosing?

Learn how to modify your NCEI data download in the [Data Library](climate-98-download.qmd)
::::
:::

The cell below contains the URL for the data you will use in this part of the notebook. There are two things to notice about the URL code:

  1. It is surrounded by quotes -- that means Python will interpret it as a `string`, or text, type, which makes sense for a URL.
  2. The URL is too long to display as one line on most screens. We've put parentheses around it so that we can easily split it into multiple lines by writing two strings -- one on each line.

However, we still have a problem - we can't get the URL back later on because it isn't saved in a **variable**. In other words, we need to give the url a **name** so that we can request in from Python later (sadly, Python has no 'hey what was that thingy I typed yesterday?' function).

::: {.callout-note icon="false"}
## {{< fa glasses size=large >}} Read more

Check out the [textbook section on variables](https://www.earthdatascience.org/courses/intro-to-earth-data-science/python-code-fundamentals/get-started-using-python/variables/)
:::

::: {.callout-important icon="false"}
# {{< fa keyboard size=large >}} Your task: Save the URL for later

  1. Pick an expressive variable name for the URL. HINT: click on the `Variables` button up top to see all your variables. Your new url variable will not be there until you define it and run the code.
  2. At the end of the cell where you define your url variable, **call your variable (type out its name)** so it can be tested.
:::

```{python}
(
    'https://github.com/cu-esiil-edu/esiil-learning-portal'
    '/releases/download/data-release/climate-stars-data.csv'
)
```

::: {.content-visible when-format="html"}
```{python}
#| code-fold: true
#| code-summary: See our solution!
ncei_url = (
    'https://github.com/cu-esiil-edu/esiil-learning-portal'
    '/releases/download/data-release/climate-stars-data.csv'
)
ncei_url
```
:::

```{python}
# DO NOT MODIFY THIS TEST CELL
resp_url = _

if type(resp_url)==str:
    print('\u2705 Great work! You correctly called your url variable.')
else:
    print('\u274C Oops - your url variable was not called correctly.')

if len(resp_url)==218:
    print('\u2705 Great work! Your url is the correct length.')
else:
    print('\u274C Oops - your url variable is not the correct length.')
```

The `pandas` library you imported can download data from the internet directly into a type of Python **object** called a `DataFrame`. In the code cell below, you can see an attempt to do just this. But there are some problems...

::: {.callout-important icon="false"}
# {{< fa keyboard size=large >}} Your task: Fix some code!

  1. Leave a space between the `#` and text in the comment and try making the comment more informative
  2. Make any changes needed to get this code to run. HINT: The `my_url` variable doesn't exist - you need to replace it with the variable name **you** chose.
  3. Modify the `.read_csv()` statement to include the following parameters:

     + `index_col='DATE'` -- this sets the `DATE` column as the index. Needed for subsetting and resampling later on
     + `parse_dates=True` -- this lets `python` know that you are working with time-series data, and values in the indexed column are **date time objects**
     + `na_values=['NaN']` -- this lets `python` know how to handle missing values

  4. Clean up the code by using **expressive variable names**, **expressive column names**, **PEP-8 compliant code**, and **descriptive comments**
:::

::: {callout-warning}
**Make sure to call your `DataFrame` by typing it's name as the last line of your code cell** Then, you will be able to run the test cell below and find out if your answer is correct.
:::

```{python}
#| error: true
climate_df = pd.read_csv(
    my_url,
    index_col='something')
climate_df
```

::: {.content-visible when-format="html"}
```{python}
#| code-fold: true
#| code-summary: See our solution!
# Download the climate data
climate_df = pd.read_csv(
    ncei_url,
    index_col='DATE',
    parse_dates=True,
    na_values=['NaN'])
climate_df
```
:::

```{python}
# DO NOT MODIFY THIS TEST CELL
tmax_df_resp = _

if isinstance(tmax_df_resp, pd.DataFrame):
    print('\u2705 Great work! You called a DataFrame.')
else:
    print('\u274C Oops - make sure to call your DataFrame for testing.')
```

> HINT: Check out the `type()` function below - you can use it to check that your data is now in `DataFrame` type object

```{python}
# Check that the data was imported into a pandas DataFrame
type(climate_df)
```

## Clean up your `DataFrame`
::: {.callout-important icon="false"}
# {{< fa keyboard size=large >}} Your task: Get rid of unwanted columns

You can use **double brackets** (`[[` and `]]`) to only select the columns that you want from your `DataFrame`. 

  - [ ] Change `some_column_name` to the Precipitation column name and `another_column_name` to the Observed Temperature column name.

:::: {.callout-warning}
Column names are text values, not variable names, so you need to put them in quotes!
::::
:::

::: {callout-warning}
**Make sure to call your `DataFrame` by typing it's name as the last line of your code cell** Then, you will be able to run the test cell below and find out if your answer is correct.
:::

```{python}
#| error: true
climate_df = climate_df[['some_column_name', 'another_column_name']]
climate_df
```

::: {.content-visible when-format="html"}
```{python}
#| code-fold: true
#| code-summary: See our solution!
# Clean up the DataFrame
climate_df = climate_df[['PRCP', 'TOBS']]
climate_df
```
:::

```{python}
# DO NOT MODIFY THIS TEST CELL
tmax_df_resp = _

summary = [round(val, 2) for val in tmax_df_resp.mean().values]
if summary == [54.53]:
    points += 4
    print('\u2705 Great work! You correctly downloaded data.')
else:
    print('\u274C Oops - your data are not correct.')
```

::: {.content-visible when-format="ipynb"}
Great work! You finished the data cleaning section of this coding challenge. You can go on to the next notebook -- but first, make sure to store the climate `DataFrame` you made so that you can use it in the next notebooks. We'll do this using the [ipython `store` **cell magic**](https://ipython.readthedocs.io/en/stable/config/extensions/storemagic.html). [Cell magic commands](https://ipython.readthedocs.io/en/stable/interactive/magics.html) aren't part of your regular code; they're there to help you with coding in Jupyter Notebooks. You can tell it's a magic command because it starts with `%`:

```{python}
%store climate_df
```
:::