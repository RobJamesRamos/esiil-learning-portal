## STEP 5: Plot the Veery observations by month

First thing first -- let's load your stored variables and import libraries.

```{python}
%store -r
```

```{python}
# Get month names
import calendar

# Libraries for Dynamic mapping
import cartopy.crs as ccrs
import hvplot.pandas
import panel as pn
```

### Create a simplified `GeoDataFrame` for plotting

Plotting larger files can be time consuming. The code below will streamline plotting with `hvplot` by simplifying the geometry, projecting it to a Mercator projection that is compatible with `geoviews`, and cropping off areas in the Arctic.

::: {.callout-task title="Simplify ecoregion data"}

Download and save ecoregion boundaries from the EPA:

1.  Make a copy of your ecoregions `GeoDataFrame` with the `.copy()` method, and save it to another variable name. Make sure to do everything else in this cell with your new copy!
2. Select rows where the `REALM` is `Neotropic` (roughtly South America) or `Nearctic` (roughly North America). This narrows down the dataset and also eliminates some geometries that might cause us problems.
3.  Simplify the ecoregions with `.simplify(.1)`, and save it back to the `geometry` column.
4.  Change the Coordinate Reference System (CRS) to Mercator with `.to_crs(ccrs.Mercator())`
5.  Use the plotting code in the cell to check that the plotting runs quickly and looks the way you want, making sure to change `gdf` to YOUR `GeoDataFrame` name.
:::

```{python}
#| template: student

# Make a copy of the ecoregions

# Simplify the geometry to speed up processing

# Change the CRS to Mercator for mapping

# Check that the plot runs in a reasonable amount of time
gdf.hvplot(geo=True, crs=ccrs.Mercator())
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Make a copy of the ecoregions
ecoregions_plot_gdf = ecoregions_gdf.copy()

# Select only Neotropic and Nearctic realms
ecoregions_plot_gdf = ecoregions_plot_gdf[
    ecoregions_plot_gdf.realm.isin(['Neotropic', 'Nearctic']) ]

# Simplify the geometry to speed up processing
ecoregions_plot_gdf.geometry = ecoregions_plot_gdf.simplify(.1)

# Change the CRS to Mercator for mapping
ecoregions_plot_gdf = ecoregions_plot_gdf.to_crs(ccrs.Mercator())

# Check that the plot runs
ecoregions_plot_gdf.hvplot(geo=True, crs=ccrs.Mercator())
```
:::

::: {.callout-task title="Map migration over time"}

1. If applicable, replace any variable names with the names you defined previously.
2. Replace `column_name_used_for_ecoregion_color` and `column_name_used_for_slider` with the column names you wish to use.
3. Customize your plot with your choice of title, tile source, color map, and size.
:::

```{python}
#| template: student
# Join the occurrences with the plotting GeoDataFrame
occurrence_gdf = ecoregions_plot_gdf.join(occurrence_df)

# Get the plot bounds so they don't change with the slider
xmin, ymin, xmax, ymax = occurrence_gdf.total_bounds

# Plot occurrence by ecoregion and month
migration_plot = (
    occurrence_gdf
    .hvplot(
        c=column_name_used_for_shape_color,
        groupby=column_name_used_for_slider,
        # Use background tiles
        geo=True, crs=ccrs.Mercator(), tiles='CartoLight',
        title="Your Title Here",
        xlim=(xmin, xmax), ylim=(ymin, ymax),
        frame_height=600,
        widget_location='bottom'
    )
)

# Save the plot
migration_plot.save('migration.html', embed=True)

# Show the plot
migration_plot
```


::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Join the occurrences with the plotting GeoDataFrame
occurrence_gdf = ecoregions_plot_gdf.join(occurrence_df)

# Get the plot bounds so they don't change with the slider
xmin, ymin, xmax, ymax = occurrence_gdf.total_bounds

# Define the slider widget
slider = pn.widgets.DiscreteSlider(
    name='month', 
    options={calendar.month_name[i]: i for i in range(1, 13)}
)

# Plot occurrence by ecoregion and month
migration_plot = (
    occurrence_gdf
    .hvplot(
        c='norm_occurrences',
        groupby='month',
        # Use background tiles
        geo=True, crs=ccrs.Mercator(), tiles='CartoLight',
        title="Veery migration",
        xlim=(xmin, xmax), ylim=(ymin, ymax),
        frame_height=600,
        colorbar=False,
        widgets={'month': slider},
        widget_location='bottom'
    )
)

# Save the plot
migration_plot.save('migration.html', embed=True)

# Show the plot
migration_plot
```
:::

::: {.content-visible when-format="html"}
```{=html}
<embed type="text/html" src="migration.html" width="600" height="800">
```
:::

::: {.callout-extra title="Fix the month labels"}

Notice that the `month` slider displays numbers instead of the month name. Use `pn.widgets.DiscreteSlider()` with the `options=` parameter set to give the months names. You might want to try asking ChatGPT how to do this, or look at the documentation for `pn.widgets.DiscreteSlider()`. This is pretty tricky!
:::