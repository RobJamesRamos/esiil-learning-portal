[
  {
    "objectID": "notebooks/01-climate/climate-40-wrapup.html",
    "href": "notebooks/01-climate/climate-40-wrapup.html",
    "title": "",
    "section": "",
    "text": "Try It: Your Turn!\n\n\n\nWhat question do you want to answer with climate data? The options are limitless! To get started, you could think about:\n\nHow is climate change happening in your home town?\nHow is climate change different at different latitudes?\nDo heat waves affect urban areas more?"
  },
  {
    "objectID": "notebooks/01-climate/climate-32-wrangle.html",
    "href": "notebooks/01-climate/climate-32-wrangle.html",
    "title": "Part 2: Wrangle your data",
    "section": "",
    "text": "Because Python is open source, lots of different people and organizations can contribute (including you!). Many contributions are in the form of packages which do not come with a standard Python download.\n\n\n\n\n\n\nRead More: Packages need to be installed and imported.\n\n\n\nLearn more about using Python packages. How do you find and use packages? What is the difference between installing and importing packages? When do you need to do each one? This article on Python packages will walk you through the basics.\n\n\nIn the cell below, someone was trying to import the pandas package, which helps us to work with tabular data such as comma-separated value or csv files.\n\n\n\n\n\n\nTry It: Import a package\n\n\n\n\nCorrect the typo below to properly import the pandas package under its alias pd.\nRun the cell to import pandas\n\n\n\n\n# Import pandas\nimport pandsa as pd\n\n\n# Import pandas\nimport pandas as pd"
  },
  {
    "objectID": "notebooks/01-climate/climate-32-wrangle.html#python-packages-let-you-use-code-written-by-experts-around-the-world",
    "href": "notebooks/01-climate/climate-32-wrangle.html#python-packages-let-you-use-code-written-by-experts-around-the-world",
    "title": "Part 2: Wrangle your data",
    "section": "",
    "text": "Because Python is open source, lots of different people and organizations can contribute (including you!). Many contributions are in the form of packages which do not come with a standard Python download.\n\n\n\n\n\n\nRead More: Packages need to be installed and imported.\n\n\n\nLearn more about using Python packages. How do you find and use packages? What is the difference between installing and importing packages? When do you need to do each one? This article on Python packages will walk you through the basics.\n\n\nIn the cell below, someone was trying to import the pandas package, which helps us to work with tabular data such as comma-separated value or csv files.\n\n\n\n\n\n\nTry It: Import a package\n\n\n\n\nCorrect the typo below to properly import the pandas package under its alias pd.\nRun the cell to import pandas\n\n\n\n\n# Import pandas\nimport pandsa as pd\n\n\n# Import pandas\nimport pandas as pd"
  },
  {
    "objectID": "notebooks/01-climate/climate-32-wrangle.html#download-the-practice-data",
    "href": "notebooks/01-climate/climate-32-wrangle.html#download-the-practice-data",
    "title": "Part 2: Wrangle your data",
    "section": "Download the practice data",
    "text": "Download the practice data\nNext, lets download some climate data from ?meta:params.01-climate.location to practice with. We keep our practice data on GitHub, so that we can check that it still works and make sure it looks just like the data you would download from the original source.\n\n\n\n\n\n\nUsing online climate data\n\n\n\nDo you want to download your own climate data from a place of your choosing? We think the sample data we’ve provided is helpful for learning, but hopefully you have some other places and times you want data from. Learn how to modify your NCEI data download in our NCEI Data Library entry.\n\n\nThe cell below contains the URL for the data you will use in this part of the notebook. There are two things to notice about the URL code:\n\nIt is surrounded by quotes – that means Python will interpret it as a string, or text, type, which makes sense for a URL.\nThe URL is too long to display as one line on most screens. We’ve put parentheses around it so that we can easily split it into multiple lines by writing two strings – one on each line.\n\nHowever, we still have a problem - we can’t get the URL back later on because it isn’t saved in a variable. In other words, we need to give the url a name so that we can request in from Python later (sadly, Python has no ‘hey what was that thingy I typed yesterday?’ function).\n\n\n\n\n\n\nRead More: Names/variables in Python\n\n\n\nOne of the most common challenges for new programmers is making sure that your results are stored so you can use them again. In Python, this is called naming, or saving a variable. Learn more in this hands-on activity on using variables from our learning portal.\n\n\n\n\n\n\n\n\nTry It: Save the URL for later\n\n\n\n\nPick an expressive variable name for the URL.\nClick on the Jupyter tab in the console panel at the bottom of VSCode to see all your variables. Your new url variable will not be there until you define it and run the code.\nAt the end of the cell where you define your url variable, call your variable (type out its name) so it can be tested.\n\n\n\n\n(\n    'https://github.com/cu-esiil-edu/esiil-learning-portal'\n    '/releases/download/data-release/climate-foundations-data.csv'\n)\n\n\nncei_url = (\n    'https://github.com/cu-esiil-edu/esiil-learning-portal'\n    '/releases/download/data-release/climate-foundations-data.csv'\n)\nncei_url\n\nThe pandas library you imported can download data from the internet directly into a type of Python object called a DataFrame. In the code cell below, you can see an attempt to do just this. But there are some problems…\n\n\n\n\n\n\nTry It: Fix some code!\n\n\n\n\nLeave a space between the # and text in the comment and try making the comment more informative\nMake any changes needed to get this code to run. HINT: The my_url variable doesn’t exist - you need to replace it with the variable name you chose.\nModify the .read_csv() statement to include the following parameters:\n\nindex_col='DATE' – this sets the DATE column as the index. Needed for subsetting and resampling later on\nparse_dates=True – this lets python know that you are working with time-series data, and values in the indexed column are date time objects\nna_values=['NaN'] – this lets python know how to handle missing values\n\nClean up the code by using expressive variable names, expressive column names, PEP-8 compliant code, and descriptive comments\n\n\n\n\nMake sure to call your DataFrame by typing it’s name as the last line of your code cell Then, you will be able to run the test cell below and find out if your answer is correct.\n\n\nclimate_df = pd.read_csv(\n    my_url,\n    index_col='something')\nclimate_df\n\n\n# Download the climate data\nclimate_df = pd.read_csv(\n    ncei_url,\n    index_col='DATE',\n    parse_dates=True,\n    na_values=['NaN'])\nclimate_df\n\n\nHINT: Check out the type() function below - you can use it to check that your data is now in DataFrame type object\n\n\n# Check that the data was imported into a pandas DataFrame\ntype(climate_df)"
  },
  {
    "objectID": "notebooks/01-climate/climate-32-wrangle.html#clean-up-your-dataframe",
    "href": "notebooks/01-climate/climate-32-wrangle.html#clean-up-your-dataframe",
    "title": "Part 2: Wrangle your data",
    "section": "Clean up your DataFrame",
    "text": "Clean up your DataFrame\n\n\n\n\n\n\nTry It: Get rid of unwanted columns\n\n\n\nYou can use double brackets ([[ and ]]) to select only the columns that you want from your DataFrame:\n\nChange some_column_name to the Precipitation column name and another_column_name to the Observed Temperature column name.\n\n\n\n\n\n\n\nWarning\n\n\n\nColumn names are text values, not variable names, so you need to put them in quotes!\n\n\n\n\n\nMake sure to call your DataFrame by typing it’s name as the last line of your code cell Then, you will be able to run the test cell below and find out if your answer is correct.\n\n\nclimate_df = climate_df[['some_column_name', 'another_column_name']]\nclimate_df\n\n\n# Clean up the DataFrame\nclimate_df = climate_df[['PRCP', 'TOBS']]\nclimate_df"
  },
  {
    "objectID": "notebooks/01-climate/climate-11-python-as-a-calculator.html",
    "href": "notebooks/01-climate/climate-11-python-as-a-calculator.html",
    "title": "Practice using names and operators in Python",
    "section": "",
    "text": "We’ve found that it’s helpful for students who are brand new to programming to have some practice with the basic syntax. If that’s you, that’s what this notebook is for - we hope it helps with getting used to Python. If you’re someone with more experience, don’t overthink it - just move on quickly to the analysis for this week!\nBe sure you have read the following chapters of the Introduction to Earth Data Science online textbook:\nThese chapters cover:"
  },
  {
    "objectID": "notebooks/01-climate/climate-11-python-as-a-calculator.html#assignment-data",
    "href": "notebooks/01-climate/climate-11-python-as-a-calculator.html#assignment-data",
    "title": "Practice using names and operators in Python",
    "section": "Assignment Data",
    "text": "Assignment Data\nThis data in this assignment, represent average monthly temperature for Boulder, Colorado, provided by the U.S. National Oceanic and Atmospheric Administration (NOAA)."
  },
  {
    "objectID": "notebooks/01-climate/climate-11-python-as-a-calculator.html#create-variables-in-python",
    "href": "notebooks/01-climate/climate-11-python-as-a-calculator.html#create-variables-in-python",
    "title": "Practice using names and operators in Python",
    "section": "Create Variables in Python",
    "text": "Create Variables in Python\nAdd your code to the cell below to complete the following task:\n\nCreate a unique variable that represents the monthly average temperature (Fahrenheit) for each month January through March.\nName each variable using the month column name. You should have 3 variables in total. (jan, feb, and march)\n\nIMPORTANT: Python variable names are CASE SENSITIVE! Be sure that you spell the variable name correctly and consider capitalization.\n\n\n\nMonth\nTemperature (Fahrenheit)\n\n\n\n\njan\n32.0\n\n\nfeb\n35.6\n\n\nmar\n41.0\n\n\n\n\n# Create variables of monthly temp\n\n# BEGIN SOLUTION\n\njan = 32.0\nfeb = 35.6\nmar = 41.0\n\nround(jan + feb + mar, 1)\n# END SOLUTION\n\n\n# DO NOT MODIFY THIS CELL!\n# Did you create all of the variables? Run this cell to find out\n\nvariables_points = 0\n\nvariables_exist = False\n\ntry:\n    checksum = round(jan + feb + mar, 1)\n    print(\"\\u2705 Nice work - all of your variables exist!\")\n    variables_points += 3\n    variables_exist = True\nexcept NameError as ne:\n    print((\"\\u274C Oops! At least one of your variables is missing. \"\n           \"Be sure that all your variables are spelled exactly as it is \"\n           \"represented in the Month column in the table above\"), \n          ne)\n\nif variables_exist:\n    if checksum == 108.6:\n        print(\"\\u2705 All of your variables are set to the correct values.\")\n        variables_points += 3\n    else:\n        print((\"\\u274C You variables exist, but at least one does not have \"\n               \"the correct value (the sum is incorrect).\"))\n\nprint((\"\\n \\u27A1 You received {} out of 6 points for creating the required \"\n       \"variables.\"\n       .format(variables_points)))\n\nvariables_points"
  },
  {
    "objectID": "notebooks/01-climate/climate-11-python-as-a-calculator.html#run-calculations-on-variables",
    "href": "notebooks/01-climate/climate-11-python-as-a-calculator.html#run-calculations-on-variables",
    "title": "Practice using names and operators in Python",
    "section": "Run Calculations on Variables",
    "text": "Run Calculations on Variables\nIn the cell below, complete the following task:\n\nConvert the 6 variable values for January through June that you created above from Fahrenheit to Celsius using the following equation:\n\nCelsius = (Fahrenheit - 32) / 1.8\nNote that Python by default follows the standard rules of math order of operations. This means that division would happen BEFORE subtraction. Including Fahrenheit - 32 within parenthesis () tells Python to execute that calculation first.\n\n\n\n# Convert variable values from Fahrenheit to Celsius\n\n# BEGIN SOLUTION\njan = (jan - 32) / 1.8\nfeb = (feb - 32) / 1.8\nmar = (mar - 32) / 1.8\nround(jan + feb + mar, 1)\n# END SOLUTION\n\n\n# DO NOT MODIFY THIS CELL\n\nvariable_mod_points = 0\n\nchecksum_celsius = 7.0\n\nif round(jan + feb + mar, 1) == checksum_celsius:\n    print((\"\\u2705 You modified the variables you created above correctly, \"\n           \"good job!\"))\n    variable_mod_points += 3\nelse:\n    print((\"\\u274C You did not modify the variables as expected. Make sure \"\n           \"you assigned the output of your modification back to the \"\n           \"variable.\"))\n\nprint((\"\\n \\u27A1 You received {} out of 3 points for reassigning the \"\n       \"variable's values.\"\n       .format(variable_mod_points)))\n\nvariable_mod_points"
  },
  {
    "objectID": "notebooks/01-climate/climate-11-python-as-a-calculator.html#create-list-of-converted-monthly-temperatures",
    "href": "notebooks/01-climate/climate-11-python-as-a-calculator.html#create-list-of-converted-monthly-temperatures",
    "title": "Practice using names and operators in Python",
    "section": "Create List of Converted Monthly Temperatures",
    "text": "Create List of Converted Monthly Temperatures\nIn the cell below, add your code after the line for Your Code Here, replacing raise NotImplementedError() with your code, to complete the following task:\n\nCreate a Python object of type list called temp for average monthly temperature for Boulder, CO containing the variables for January to June in the Celsius degrees.\nCall the list you created at the end of the cell. For example:\n\nlist = [value1, value2]\nlist\nIMPORTANT: If you don’t call the object at the end of your cell, the autograder will break.\n\n# Create list of converted monthly temps\n\n# BEGIN SOLUTION\n\ntemp = [jan, feb, mar]\n\ntemp\n# END SOLUTION\n\n\n# DO NOT MODIFY THIS CELL!\n\nstudent_temp = _\n\nvariable_list_points = 0\nis_list = False\n\nif isinstance(student_temp, list):\n    print((\"\\u2705 Nice work! The object you called at the end of the cell \"\n           \"is of type - list\"))\n    variable_list_points += 1\n    is_list = True\nelse:\n    print((\"\\u274C Oops! Did you create a list variable and call it at the \"\n           \"end of the cell? Please reread the directions.\"))\nif is_list:\n    if len(student_temp) == 3:\n        print((\"\\u2705 Nice work! Your list has the correct number of \"\n               \"elements\"))\n        variable_list_points += 1\n    else:\n        print((\"\\u274C Oops - your list is not the correct length.\"))\n    \nif round(sum(student_temp), 1) == checksum_celsius:\n    print((\"\\u2705 The list you created has the correct values in it, good \"\n           \"job!\"))\n    variable_list_points += 3\nelse:\n    print(\"\\u274C The list you created does not contain the correct values.\")\n\nprint((\"\\n \\u27A1 You received {} out of 5 points for creating a list of the \"\n       \"temperatures January-June.\")\n       .format(variable_list_points))\n\nvariable_list_points"
  },
  {
    "objectID": "notebooks/01-climate/climate-11-python-as-a-calculator.html#add-values-to-list-of-converted-monthly-temperatures",
    "href": "notebooks/01-climate/climate-11-python-as-a-calculator.html#add-values-to-list-of-converted-monthly-temperatures",
    "title": "Practice using names and operators in Python",
    "section": "Add Values to List of Converted Monthly Temperatures",
    "text": "Add Values to List of Converted Monthly Temperatures\nIn the cell below, replace the raise NotImplementedError() with your code to complete the following task:\n\nAdd the average monthly temperature values for July to December in the Celsius degrees (in the table below) to your list called temp of converted monthly temperatures. &gt; HINT: There are actually 3 different ways you could complete this task: .append(), .extend(), or +=. Try out all 3 for practice!\nPrint your completed list of converted monthly temperatures (in Celsius degrees).\n\n\n\n\nMonth\nTemperature (Celsius)\n\n\n\n\napr\n9.6\n\n\nmay\n14.4\n\n\njune\n19.6\n\n\njuly\n22.8\n\n\naug\n21.7\n\n\nsept\n16.7\n\n\noct\n11.6\n\n\nnov\n4.9\n\n\ndec\n1.0\n\n\n\n\n# BEGIN SOLUTION\ntemp.append(9.6)\ntemp.extend([14.4, 19.6, 22.8, 21.7])\ntemp += [16.7, 11.6, 4.9, 1.0]\nprint(round(sum(temp), 1))\ntemp\n# END SOLUTION\n\n\n# DO NOT MODIFY THIS CELL\n\nstudent_temp_long = _\n\ntemp_long_points = 0\nis_list = False\n\nif isinstance(student_temp_long, list):\n    print((\"\\u2705 Nice work! The object you called at the end of the cell \"\n           \"is of type - list\"))\n    temp_long_points += 2\n    is_list = True\nelse:\n    print((\"\\u274C Oops! Did you create a list variable and call it at the \"\n           \"end of the cell? Please reread the directions.\"))\n\nif is_list:\n    if len(student_temp_long) == 12:\n        print((\"\\u2705 Nice work! Your list has the correct number of \"\n               \"elements\"))\n        temp_long_points += 2\n    else:\n        print((\"\\u274C Oops - your list is not the correct length.\"))\n    \nif round(sum(student_temp_long), 1) == 129.3:\n    print((\"\\u2705 The list you created has the correct values in it, good \"\n           \"job!\"))\n    temp_long_points += 3\nelse:\n    print(\"\\u274C The list you created does not contain the correct values.\")\n\nprint((\"\\n \\u27A1 You received {} out of 7 points for creating a list of the \"\n       \"temperatures January-June.\")\n       .format(temp_long_points))\n\ntemp_long_points"
  },
  {
    "objectID": "notebooks/01-climate/climate-11-python-as-a-calculator.html#discuss-use-of-pep-8-style-guide",
    "href": "notebooks/01-climate/climate-11-python-as-a-calculator.html#discuss-use-of-pep-8-style-guide",
    "title": "Practice using names and operators in Python",
    "section": "Discuss Use of PEP 8 Style Guide",
    "text": "Discuss Use of PEP 8 Style Guide\nIn the Markdown cell below, answer the following questions about the PEP 8 style guide using a bullet list:\n\nHow did the PEP 8 style guide influence your choice of variable names and your code organization in this assignment?\nDescribe one way in which these standards are promoted and/or enforced within the Python community.\n\nRemove any existing text in the cell before adding your answer.\n=== BEGIN MARK SCHEME ===\nThoughtful answer to each question - 2 pts each\n=== END MARK SCHEME ==="
  },
  {
    "objectID": "notebooks/01-climate/climate-11-python-as-a-calculator.html#bonus-challenge-list-comprehensions-in-python-optional",
    "href": "notebooks/01-climate/climate-11-python-as-a-calculator.html#bonus-challenge-list-comprehensions-in-python-optional",
    "title": "Practice using names and operators in Python",
    "section": " BONUS Challenge: List Comprehensions in Python (OPTIONAL)",
    "text": "BONUS Challenge: List Comprehensions in Python (OPTIONAL)\nThis activity is optional!\nAbove you performed many tasks manually. Included in those manual steps was one where you converted each individual value in your list from Fahrenheit to Celsius. In Python, list comprehensions are a great way to perform operations on a sequence of values stored within a list.\nThe syntax for a list comprehension is below. Essentially what is happening is that Python is iterating through each value in the old list (for i in my_old_list) and multiplying it by 2 (i*2). In each iteration of the loop, the value i represents the next value in the list. In the example below, i will first be the value 1, and then 2, and finally 3.\nmy_old_list = [1, 2, 3]\nmy_new_list = [i*2 for i in my_old_list] \nmy_new_list will equal each value in my_old_list multiplied by 2, so my_new_list will be equivalent to [2, 4, 6]. You can run this code and see the output for yourself! Try to experiment with writing more efficient code. Convert your boulder_precip_inches list of values to a new list called boulder_precip_mm using a list comprehension. Use the syntax above to help you create this list comprehension.\n\nYour Challenge If You Chose to Accept It\nThe code below creates a list object called temp_fah that stores 6 temperature values in degrees Fahrenheit.\ntemp_fah = [32.0, 35.6, 41.0, 49.2, 57.9, 67.2]\nDo the following:\n\nCopy the code into the code cell below\nCreate a list comprehension that creates a new object which contains each value converted into Celsius.\nCall the new list you created at the end of the cell.\n\n\n\nLearn More About For Loops and List Comprehensions in Python (OPTIONAL)\nFor more information on loops and changing values within a list, you can check out:\n\nEarth Lab’s lesson introducing loops in Python, and\nEarth Lab’s lesson on list comprehensions in Python."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the ESIIL Learning Portal!",
    "section": "",
    "text": "Welcome to the ESIIL Learning Portal!\nExplore textbooks:\n\nIntroduction to Earth Data Science\nESIIL Data Short Course\nESIIL STARS Textbook"
  },
  {
    "objectID": "notebooks/01-climate/climate-01-machine-readable.html",
    "href": "notebooks/01-climate/climate-01-machine-readable.html",
    "title": "Climate coding challenge, Part 0",
    "section": "",
    "text": "When writing open, reproducible scientific workflows, it is always important to make sure that:\n\nall collaborators can understand what’s going on\nany commands you give to a computer are clear and unambiguous\n\nWe call these two (sometimes competing) goals human-readability and machine-readability.\n\n\n\n\n\n\n{{&lt; fa glasses large &gt;}} Further reading\n\n\n\nRead our textbook chapter about organizing open reproducible science projects.\n\n\n\n\n\n\n\n\n\n{{&lt; fa pencil large &gt;}} Human-readable and Machine-readable\n\n\n\n\nCreate a new Markdown cell below this one using the ESC + b keyboard shortcut.\nIn the new cell, answer the following question in a Markdown quote: Does this Jupyter Notebook file have a machine-readable name? Explain your answer.\n\n\n\n\n\n\n\n\n\n\n{{&lt; fa keyboard large &gt;}} Your task: Machine-readable file names\n\n\n\nRename any notebooks in this folder with an expressive and machine-readable file name"
  },
  {
    "objectID": "notebooks/01-climate/climate-01-machine-readable.html#human-readable-and-machine-readable",
    "href": "notebooks/01-climate/climate-01-machine-readable.html#human-readable-and-machine-readable",
    "title": "Climate coding challenge, Part 0",
    "section": "",
    "text": "When writing open, reproducible scientific workflows, it is always important to make sure that:\n\nall collaborators can understand what’s going on\nany commands you give to a computer are clear and unambiguous\n\nWe call these two (sometimes competing) goals human-readability and machine-readability.\n\n\n\n\n\n\n{{&lt; fa glasses large &gt;}} Further reading\n\n\n\nRead our textbook chapter about organizing open reproducible science projects.\n\n\n\n\n\n\n\n\n\n{{&lt; fa pencil large &gt;}} Human-readable and Machine-readable\n\n\n\n\nCreate a new Markdown cell below this one using the ESC + b keyboard shortcut.\nIn the new cell, answer the following question in a Markdown quote: Does this Jupyter Notebook file have a machine-readable name? Explain your answer.\n\n\n\n\n\n\n\n\n\n\n{{&lt; fa keyboard large &gt;}} Your task: Machine-readable file names\n\n\n\nRename any notebooks in this folder with an expressive and machine-readable file name"
  },
  {
    "objectID": "notebooks/01-climate/climate-31-overview.html",
    "href": "notebooks/01-climate/climate-31-overview.html",
    "title": "Part 1: Overview",
    "section": "",
    "text": "Higher highs, lower lows, storms, and smoke – we’re all feeling the effects of climate change. In this workflow, you will take a look at trends in temperature over time in ?meta:params.01-climate.location.\n\n\n\n\n\n\nCheck out our demo video!\n\n\n\n\n\n\n\n\nBelow is a scientific Python workflow. But something’s wrong – The code won’t run! Your task is to follow the instructions below to clean and debug the Python code below so that it runs.\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if you can’t solve every bug right away. We’ll get there! If you are working on one bug for more than about 10 minutes, it’s time to ask for help.\n\n\nAt the end, you’ll repeat the workflow for a location and measurement of your choosing.\nAlright! Let’s clean up this code."
  },
  {
    "objectID": "notebooks/01-climate/climate-31-overview.html#what-the-fork-who-wrote-this",
    "href": "notebooks/01-climate/climate-31-overview.html#what-the-fork-who-wrote-this",
    "title": "Part 1: Overview",
    "section": "",
    "text": "Below is a scientific Python workflow. But something’s wrong – The code won’t run! Your task is to follow the instructions below to clean and debug the Python code below so that it runs.\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if you can’t solve every bug right away. We’ll get there! If you are working on one bug for more than about 10 minutes, it’s time to ask for help.\n\n\nAt the end, you’ll repeat the workflow for a location and measurement of your choosing.\nAlright! Let’s clean up this code."
  },
  {
    "objectID": "notebooks/01-climate/climate-33-units.html",
    "href": "notebooks/01-climate/climate-33-units.html",
    "title": "Part 3: Convert units",
    "section": "",
    "text": "It’s important to keep track of the units of all your data. You don’t want to be like the NASA team who crashed a probe into Mars because different teams used different units)!"
  },
  {
    "objectID": "notebooks/01-climate/climate-33-units.html#use-labels-to-keep-track-of-units-for-you-and-your-collaborators",
    "href": "notebooks/01-climate/climate-33-units.html#use-labels-to-keep-track-of-units-for-you-and-your-collaborators",
    "title": "Part 3: Convert units",
    "section": "Use labels to keep track of units for you and your collaborators",
    "text": "Use labels to keep track of units for you and your collaborators\nOne way to keep track of your data’s units is to include the unit in data labels. In the case of a DataFrame, that usually means the column names.\n\n\n\n\n\n\nTry It: Add units to your column name\n\n\n\nA big part of writing expressive code is descriptive labels. Let’s rename the columns of your dataframe to include units. Complete the following steps:\n\nReplace dataframe with the name of your DataFrame, and dataframe_units with an expressive new name.\nCheck out the documentation for GCHNd data. We downloaded data with “standard” units; find out what that means for both temperature and precipitation.\nReplace 'TOBS_UNIT' and 'PRCP_UNIT' with column names that reference the correct unit for each.\n\n\n\n\ndataframe_units = dataframe.rename(columns={\n    'TOBS': 'TOBS_UNIT',\n    'PRCP': 'PRCP_UNIT'\n})\n\ndataframe\n\n\nclimate_u_df = climate_df.rename(columns={\n    'TOBS': 'temp_f',\n    'PRCP': 'precip_in'\n})\nclimate_u_df"
  },
  {
    "objectID": "notebooks/01-climate/climate-33-units.html#for-scientific-applications-it-is-often-useful-to-have-values-in-metric-units",
    "href": "notebooks/01-climate/climate-33-units.html#for-scientific-applications-it-is-often-useful-to-have-values-in-metric-units",
    "title": "Part 3: Convert units",
    "section": "For scientific applications, it is often useful to have values in metric units",
    "text": "For scientific applications, it is often useful to have values in metric units\n\n\n\n\n\n\nTry It: Convert units\n\n\n\nThe code below attempts to convert the data to Celcius, using Python mathematical operators, like +, -, *, and /. Mathematical operators in Python work just like a calculator, and that includes using parentheses to designat the order of operations. The equation for converting Fahrenheit temperature to Celcius is:\n\\[\nT_C = (T_F - 32) * \\frac{5}{9}\n\\]\nThis code is not well documented and doesn’t follow PEP-8 guidelines, which has caused the author to miss an important error!\nComplete the following steps:\n\nReplace dataframe with the name of your DataFrame.\nReplace 'old_temperature' with the column name you used; Replace 'new_temperature' with an expressive column name.\nTHERE IS AN ERROR IN THE CONVERSION MATH - Fix it!\n\n\n\n\ndataframe_units['new_temperature']= dataframe_units['old_temperature']-32*5/9\ndataframe_units\n\n\nclimate_u_df['temp_c'] = (climate_u_df['temp_f'] - 32) * 5 / 9\n\nclimate_u_df\n\n\n\n\n\n\n\nLooking for an Extra Challenge?\n\n\n\nUsing the code below as a framework, write and apply a function that converts to Celcius. You should also rewrite this function name to be more expressive.\ndef convert(temperature):\n    \"\"\"Convert temperature to Celcius\"\"\"\n    return temperature # Put your equation in here\n\ndataframe['TOBS_C'] = dataframe['TOBS'].apply(convert)"
  },
  {
    "objectID": "notebooks/01-climate/climate-35-trend-line.html",
    "href": "notebooks/01-climate/climate-35-trend-line.html",
    "title": "So, is the climate changing?",
    "section": "",
    "text": "Global climate change causes different effects in different places when we zoom in to a local area. However, you probably noticed when you looked at mean annual temperatures over time that they were rising. We can use a technique called Linear Ordinary Least Squares (OLS) Regression to determine how quickly temperatures are rising on average.\nBefore we get started, it’s important to consider that OLS regression is not always the right technique, because it makes some important assumptions about our data:\n\nRandom error\n\nVariation in temperature can be caused by many things beyond global climate change. For example, temperatures often vary with patterns of ocean surface temperatures (teleconnections), the most famous of which are El Niño and La Niña. By using a linear OLS regression, we’re assuming that all the variation in temperature except for climate change is random. Normally distributed error\n\n\nIf you have taken a statistics class, you probably learned a lot about the normal, or Gaussian distribution. For right now, what you need to know is that OLS regression is useful for identifying trends in average temperature, but wouldn’t be appropriate for looking at trends in daily precipitation (because most days have zero precipitation), or at maximum or minimum annual temperatures (because these are extreme values, and the normal distribution tends to underestimate the likelihood of large events). Linearity\n\n\nWe’re assuming that temperatures are increasing or decreasing at a constant rate over time. We wouldn’t be able to look at rates that change over time. For example, many locations in the Arctic remained the same temperature for much longer than the rest of the world, because ice melt was absorbing all the extra heat. Linear OLS regression wouldn’t be able to identify when the temperature rise began on its own. Stationarity\n\n\nWe’re assuming that variation in temperature caused by things other than global climate change (e.g. the random error) behaves the same over time. For example, the linear OLS regression can’t take increased variability from year to year into account, which is a common effect of climate change. We often see “global weirding”, or more extreme head and cold, in addition to overall increases. You can observe this most easily by looking at your daily data again. Does it seem to be fanning in or out over time?\n\n\nIt’s pretty rare to encounter a perfect statistical model where all the assumptions are met, but you want to be on the lookout for serious discrepancies, especially when making predictions. For example, ignoring assumptions about Gaussian error arguably led to the 2008 financial crash.\n::: {.cell .markdown} :::: {.callout-important icon=“false”} ## {{&lt; fa pencil large &gt;}} Is linear OLS regression right for your data?\n\nTake a look at your data. In the cell below, write a few sentences about ways your data does and does not meet the linear OLS regression assumptions.\n\n\n\n\n\n\n\n{{&lt; fa keyboard large &gt;}} Your task:\n\n\n\nThe following cell contains package imports that you will need to calculate and plot an OLS Linear trend line. Make sure to run the cell before moving on, and if you have any additional packages you would like to use, add them here later on.\n\n\n\n# Advanced options on matplotlib/seaborn/pandas plots\nimport matplotlib.pyplot as plt\n# Common statistical plots for tabular data\nimport seaborn as sns\n# Fit an OLS linear regression\nfrom sklearn.linear_model import LinearRegression\n\n\n\n\n\n\n\n{{&lt; fa keyboard large &gt;}} Your task: Regression\n\n\n\n\nTo get sample code, ask ChatGPT how to fit a linear model to your data. If you’re new to using large language modesl, go ahead and check out our query\nCopy code that uses the scikit-learn package to perform a OLS linear regression to the code cell below.\nCheck out your previous plot. Does it make sense to include all the data when calculating a trend line? Be sure to select out data that meets the OLS assumptions.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe know that some computers, networks, and countries block LLM (large language model) sites, and that LLMs can sometimes perpetuate oppressive or offensive language and ideas. However, LLMs are increasingly standard tools for programming – according to GitHub many developers code 55% faster with LLM assistance. We also see in our classes that LLMs give students the ability to work on complex real-world problems earlier on. We feel it’s worth the trade-off, and at this point we would be doing you a disservice professionally to teach you to code without LLMs. If you can’t access them, don’t worry – we’ll present a variety of options for finding example code. For example, you can also search for an example on a site like StackOverflow (this is how we all learned to code, and with the right question it’s a fantastic resource for any coder to get access to up-to-date information from world experts quickly). You can also use our solutions as a starting point.\n\n\n\n# Fit an OLS Linear Regression to the data\n\n\n\nSee our solution!\nann_climate_df = ann_climate_df.loc['1989':'2024']\n\n# Drop no data values\nobservations = ann_climate_df.TOBS.dropna()\n\n# Define the dependent variable and independent variable(s)\nfeatures = observations.index.year.values.reshape(-1, 1)\nresponse = observations\n\n# Create a Linear Regression model\nmodel = LinearRegression()\n\n# Fit the model on the training data\nmodel.fit(features, response)\n\n# Calculate and print the metrics\nprint(f'Slope: {model.coef_[0]} degrees per year')"
  },
  {
    "objectID": "notebooks/01-climate/climate-35-trend-line.html#quantify-how-fast-the-climate-is-changing-with-a-trend-line",
    "href": "notebooks/01-climate/climate-35-trend-line.html#quantify-how-fast-the-climate-is-changing-with-a-trend-line",
    "title": "So, is the climate changing?",
    "section": "",
    "text": "Global climate change causes different effects in different places when we zoom in to a local area. However, you probably noticed when you looked at mean annual temperatures over time that they were rising. We can use a technique called Linear Ordinary Least Squares (OLS) Regression to determine how quickly temperatures are rising on average.\nBefore we get started, it’s important to consider that OLS regression is not always the right technique, because it makes some important assumptions about our data:\n\nRandom error\n\nVariation in temperature can be caused by many things beyond global climate change. For example, temperatures often vary with patterns of ocean surface temperatures (teleconnections), the most famous of which are El Niño and La Niña. By using a linear OLS regression, we’re assuming that all the variation in temperature except for climate change is random. Normally distributed error\n\n\nIf you have taken a statistics class, you probably learned a lot about the normal, or Gaussian distribution. For right now, what you need to know is that OLS regression is useful for identifying trends in average temperature, but wouldn’t be appropriate for looking at trends in daily precipitation (because most days have zero precipitation), or at maximum or minimum annual temperatures (because these are extreme values, and the normal distribution tends to underestimate the likelihood of large events). Linearity\n\n\nWe’re assuming that temperatures are increasing or decreasing at a constant rate over time. We wouldn’t be able to look at rates that change over time. For example, many locations in the Arctic remained the same temperature for much longer than the rest of the world, because ice melt was absorbing all the extra heat. Linear OLS regression wouldn’t be able to identify when the temperature rise began on its own. Stationarity\n\n\nWe’re assuming that variation in temperature caused by things other than global climate change (e.g. the random error) behaves the same over time. For example, the linear OLS regression can’t take increased variability from year to year into account, which is a common effect of climate change. We often see “global weirding”, or more extreme head and cold, in addition to overall increases. You can observe this most easily by looking at your daily data again. Does it seem to be fanning in or out over time?\n\n\nIt’s pretty rare to encounter a perfect statistical model where all the assumptions are met, but you want to be on the lookout for serious discrepancies, especially when making predictions. For example, ignoring assumptions about Gaussian error arguably led to the 2008 financial crash.\n::: {.cell .markdown} :::: {.callout-important icon=“false”} ## {{&lt; fa pencil large &gt;}} Is linear OLS regression right for your data?\n\nTake a look at your data. In the cell below, write a few sentences about ways your data does and does not meet the linear OLS regression assumptions.\n\n\n\n\n\n\n\n{{&lt; fa keyboard large &gt;}} Your task:\n\n\n\nThe following cell contains package imports that you will need to calculate and plot an OLS Linear trend line. Make sure to run the cell before moving on, and if you have any additional packages you would like to use, add them here later on.\n\n\n\n# Advanced options on matplotlib/seaborn/pandas plots\nimport matplotlib.pyplot as plt\n# Common statistical plots for tabular data\nimport seaborn as sns\n# Fit an OLS linear regression\nfrom sklearn.linear_model import LinearRegression\n\n\n\n\n\n\n\n{{&lt; fa keyboard large &gt;}} Your task: Regression\n\n\n\n\nTo get sample code, ask ChatGPT how to fit a linear model to your data. If you’re new to using large language modesl, go ahead and check out our query\nCopy code that uses the scikit-learn package to perform a OLS linear regression to the code cell below.\nCheck out your previous plot. Does it make sense to include all the data when calculating a trend line? Be sure to select out data that meets the OLS assumptions.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe know that some computers, networks, and countries block LLM (large language model) sites, and that LLMs can sometimes perpetuate oppressive or offensive language and ideas. However, LLMs are increasingly standard tools for programming – according to GitHub many developers code 55% faster with LLM assistance. We also see in our classes that LLMs give students the ability to work on complex real-world problems earlier on. We feel it’s worth the trade-off, and at this point we would be doing you a disservice professionally to teach you to code without LLMs. If you can’t access them, don’t worry – we’ll present a variety of options for finding example code. For example, you can also search for an example on a site like StackOverflow (this is how we all learned to code, and with the right question it’s a fantastic resource for any coder to get access to up-to-date information from world experts quickly). You can also use our solutions as a starting point.\n\n\n\n# Fit an OLS Linear Regression to the data\n\n\n\nSee our solution!\nann_climate_df = ann_climate_df.loc['1989':'2024']\n\n# Drop no data values\nobservations = ann_climate_df.TOBS.dropna()\n\n# Define the dependent variable and independent variable(s)\nfeatures = observations.index.year.values.reshape(-1, 1)\nresponse = observations\n\n# Create a Linear Regression model\nmodel = LinearRegression()\n\n# Fit the model on the training data\nmodel.fit(features, response)\n\n# Calculate and print the metrics\nprint(f'Slope: {model.coef_[0]} degrees per year')"
  },
  {
    "objectID": "notebooks/01-climate/climate-35-trend-line.html#plot-your-trend-line",
    "href": "notebooks/01-climate/climate-35-trend-line.html#plot-your-trend-line",
    "title": "So, is the climate changing?",
    "section": "Plot your trend line",
    "text": "Plot your trend line\nTrend lines are often used to help your audience understand and process a time-series plot. In this case, we’ve chosed mean temperature values rather than extremes, so we think OLS is an appropriate model to use to show a trend.\n\n\n\n\n\n\nIs it ok to plot a trend line even if OLS isn’t an appropriate model?\n\n\n\nThis is a tricky issue. When it comes to a trend line, choosing a model that is technically more appropriate may require much more complex code without resulting in a noticeably different trend line.\nWe think an OLS trend line is an ok visual tool to indicate the approximate direction and size of a trend. If you are showing standard error, making predictions or inferences based on your model, or calculating probabilities (p-values) based on your model, or making statements about the statistical significance of a trend, we’d suggest reconsidering your choice of model."
  }
]